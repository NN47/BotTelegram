from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from collections import defaultdict, Counter
import sqlite3

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
animal_data = {
    "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù": "–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω ‚Äî –∫—Ä—É–ø–Ω–æ–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ —Å –≤—ã–¥–∞—é—â–∏–º—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.",
    "–ê–ö–°–û–õ–û–¢–õ–¨": "–ê–∫—Å–æ–ª–æ—Ç–ª—å ‚Äî —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –∞–º—Ñ–∏–±–∏—è, —Å–ø–æ—Å–æ–±–Ω–∞—è –∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π.",
    "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–π—Å–∫–∏–π –ø–æ–ø—É–≥–∞–π ‚Äî —É–º–Ω–∞—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ç–∏—Ü–∞ —Å —è—Ä–∫–∏–º –æ–ø–µ—Ä–µ–Ω–∏–µ–º.",
    "–ê–ú–£–†–°–ö–ò–ô –¢–ò–ì–†": "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä ‚Äî —Å–∞–º—ã–π —Å–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ç–∏–≥—Ä–æ–≤, —Å–∏–º–≤–æ–ª —Å–∏–ª—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.",
    "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†": "–ê–Ω–¥—Å–∫–∏–π –∫–æ–Ω–¥–æ—Ä ‚Äî –æ–¥–Ω–∞ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ª–µ—Ç–∞—é—â–∏—Ö –ø—Ç–∏—Ü, —Å–∏–º–≤–æ–ª —Å–≤–æ–±–æ–¥—ã –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
}

original_quiz_questions = [
    {"question": "1. –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –ö–∞–∫ –≤—ã –µ–≥–æ –ø—Ä–æ–≤–µ–¥—ë—Ç–µ?", "options": {
        "–†–∞–∑–ª—è–≥—É—Å—å –Ω–∞ –¥–∏–≤–∞–Ω–µ —Å –∫–Ω–∏–≥–æ–π": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ü–æ–π–¥—É –≥—É–ª—è—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–£—Å—Ç—Ä–æ—é –ø–∏–∫–Ω–∏–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†",
        "–ü–æ—Å–∏–∂—É –≤ —Ç–∏—à–∏–Ω–µ —Å —á–∞–µ–º": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù"
    }},
    {"question": "2. –í–∞—à —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?", "options": {
        "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–£–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —Ç–∏—à–∏–Ω–µ": "–ê–ú–£–†–°–ö–ò–ô –¢–ò–ì–†",
        "–°—ä–µ—Å—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ü–æ–π—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†"
    }},
    {"question": "3. –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã –≤–∞–º –±–ª–∏–∂–µ?", "options": {
        "–ö–æ–º—Ñ–æ—Ä—Ç –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–Ø—Ä–∫–æ –∏ —Å–º–µ–ª–æ": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–°—Ç—Ä–æ–≥–æ –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ": "–ê–ú–£–†–°–ö–ò–ô –¢–ò–ì–†",
        "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ –∏ —É–¥–æ–±–Ω–æ": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†"
    }},
    {"question": "4. –õ—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞?", "options": {
        "–¢—ë–ø–ª—ã–π –¥–æ–∂–¥–∏–∫ –∏ –ø–ª–µ–¥": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–Ø—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ –∏ –≤–µ—Ç–µ—Ä": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–ú–æ—Ä–æ–∑–Ω—ã–π –≤–æ–∑–¥—É—Ö –∏ —Å–Ω–µ–≥": "–ê–ú–£–†–°–ö–ò–ô –¢–ò–ì–†",
        "–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è —Ç–µ–Ω—å –ª–µ—Ç–æ–º": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†"
    }},
    {"question": "5. –ß—Ç–æ –≤—ã –æ–±—ã—á–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ?", "options": {
        "–Ø –¥—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏!": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–¢–∞–Ω—Ü—É—é –¥–æ —É–ø–∞–¥—É": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†",
        "–°–∏–∂—É –≤ —É–≥–æ–ª–∫–µ –∏ –Ω–∞–±–ª—é–¥–∞—é": "–ê–ú–£–†–°–ö–ò–ô –¢–ò–ì–†",
        "–í–æ–æ–±—â–µ –Ω–µ —Ö–æ–∂—É –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏": "–ê–ö–°–û–õ–û–¢–õ–¨"
    }},
    {"question": "6. –ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?", "options": {
        "–õ—é–±–ª—é –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–ü–ª–∞–Ω–∏—Ä—É—é –≤—Å—ë –∑–∞—Ä–∞–Ω–µ–µ": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù",
        "–ù–µ –ª—é–±–ª—é –º–µ–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ì–æ—Ç–æ–≤ –Ω–∞ –≤—Å—ë —Ä–∞–¥–∏ —ç–º–æ—Ü–∏–π": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†"
    }},
    {"question": "7. –£—Ç—Ä–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. –ß—Ç–æ –ø–µ—Ä–≤–æ–µ –≤ –≥–æ–ª–æ–≤–µ?", "options": {
        "–ì–¥–µ –∫–æ—Ñ–µ?": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ù—É–∂–Ω–æ –≤—Å–µ—Ö —Å–æ–±—Ä–∞—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù",
        "–£–∂–µ –±–µ–≥—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†",
        "–° –∫–µ–º –±—ã –ø–æ–±–æ–ª—Ç–∞—Ç—å?": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô"
    }},
    {"question": "8. –ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –±–æ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç–∏?", "options": {
        "–¢–µ–ø–ª–æ –∏ —É—é—Ç": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–°–≤–æ–±–æ–¥–∞ –∏ –≤–µ—Ç–µ—Ä –≤ –ª–∏—Ü–æ": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†",
        "–°–µ–º—å—è –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù",
        "–û–±—â–µ–Ω–∏–µ –∏ —é–º–æ—Ä": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô"
    }},
    {"question": "9. –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª–æ–º–∞–ª—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?", "options": {
        "–ü–æ–ª–µ–∂—É –∏ –æ—Ç–¥–æ—Ö–Ω—É ‚Äî –¥–∞–∂–µ —Ö–æ—Ä–æ—à–æ!": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ü–æ–∑–≤–æ–Ω—é –¥—Ä—É–∑—å—è–º": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–ü–æ–π–¥—É –Ω–∞ —É–ª–∏—Ü—É, —Å—Ç–æ–ª—å–∫–æ –¥–µ–ª!": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†",
        "–°–¥–µ–ª–∞—é —É–±–æ—Ä–∫—É –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É—é –∫–Ω–∏–≥–∏": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù"
    }},
    {"question": "10. –ö–∞–∫–æ–π –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä?", "options": {
        "–í –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –ø–æ–¥ –æ–¥–µ—è–ª–æ–º": "–ê–ö–°–û–õ–û–¢–õ–¨",
        "–ù–∞ —Å—Ü–µ–Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è": "–ê–õ–ï–ö–°–ê–ù–î–†–ò–ô–°–ö–ò–ô –ü–û–ü–£–ì–ê–ô",
        "–ó–∞ —É–∂–∏–Ω–æ–º —Å –±–ª–∏–∑–∫–∏–º–∏": "–ê–ó–ò–ê–¢–°–ö–ò–ô –°–õ–û–ù",
        "–ù–∞ –ø—Ä–æ–±–µ–∂–∫–µ –ø–æ–¥ –ª—É–Ω–æ–π": "–ê–ù–î–°–ö–ò–ô –ö–û–ù–î–û–†"
    }}
]

user_quiz_data = defaultdict(lambda: {"current": 0, "answers": []})

conn = sqlite3.connect("results.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS results (
        user_id INTEGER,
        animals TEXT
    )
""")
conn.commit()

def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –≤—ã —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?", reply_markup=InlineKeyboardMarkup(keyboard)
    )

def show_question(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    state = user_quiz_data[user_id]

    current = state["current"]
    if current >= len(original_quiz_questions):
        return show_result(update, context)

    question_data = original_quiz_questions[current]
    options = list(question_data["options"].items())

    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"answer:{i}")]
        for i, (text, _) in enumerate(options)
    ]
    if current > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])

    query.edit_message_text(question_data["question"], reply_markup=InlineKeyboardMarkup(keyboard))

def handle_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    state = user_quiz_data[user_id]
    current = state["current"]

    if current >= len(original_quiz_questions):
        return

    try:
        index = int(query.data.split(":", 1)[1])
        question = original_quiz_questions[current]
        option_text, animal = list(question["options"].items())[index]
    except (IndexError, ValueError):
        query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    if len(state["answers"]) > current:
        state["answers"][current] = animal
    else:
        state["answers"].append(animal)
    state["current"] += 1

    show_question(update, context)

def handle_back(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    state = user_quiz_data[user_id]

    if state["current"] > 0:
        state["current"] -= 1
        show_question(update, context)

def show_result(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    answers = user_quiz_data[user_id]["answers"]
    counter = Counter(answers)
    max_count = max(counter.values())
    top_animals = [animal for animal, count in counter.items() if count == max_count]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
    c.execute("INSERT INTO results (user_id, animals) VALUES (?, ?)", (user_id, ", ".join(top_animals)))
    conn.commit()

    result_text = "–í–∞—à–∏ —Ç–æ—Ç–µ–º–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:\n\n"
    for animal in top_animals:
        desc = animal_data.get(animal, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        result_text += f"üêæ {animal}: {desc}\n\n"

    keyboard = [[
        InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start_quiz"),
        InlineKeyboardButton("üêæ –û—Ñ–æ—Ä–º–∏—Ç—å –æ–ø–µ–∫—É", url="https://example.com/adopt")
    ]]
    query.edit_message_text(result_text.strip(), reply_markup=InlineKeyboardMarkup(keyboard))

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "start_quiz":
        user_quiz_data[user_id] = {"current": 0, "answers": []}
        show_question(update, context)
    elif query.data.startswith("answer:"):
        handle_answer(update, context)
    elif query.data == "back":
        handle_back(update, context)

def main():
    updater = Updater("You_Token", use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
